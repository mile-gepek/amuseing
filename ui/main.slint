import { Button, ListView, Slider } from "std-widgets.slint";

component PlaylistSelection inherits Rectangle {
    preferred-height: 100%;
    background: red;
    in-out property <int> selected_index;
}

component SongComponent inherits Rectangle {
    background: #3d3d3d;
    in-out property <string> title <=> text.text;
    HorizontalLayout {
        play-button-rect := Rectangle {
            width: self.height;
            Text {
                text: "B";
            }
        }

        text := Text {
            width: 100%;
            vertical-alignment: center;
            height: root.height;
        }
    }
}

export global PlayerControls {
    pure callback toggle-repeat-mode();
    in property <string> repeat-mode-text: "All";

    pure callback pause-play();

    // first arg is playlist id, second is song id
    pure callback start-song(int, int);

    pure callback rewind();
    pure callback fast-forward();

    pure callback change-volume(float);

    pure callback seek(float);
    pure callback time-playing-percent() -> float;
}

component PlayerControlsComponent inherits Rectangle {
    background: green;

    // While the slider is clicked and held with the mouse, `seeking` is true which turns off the timer for updating the value of the slider
    property <bool> seeking: false;

    property <bool> is-paused: false;
    property <float> volume: 0.5;
    property <bool> is-muted: false;

    VerticalLayout {
        seek-bar := Slider {
            minimum: 0.0;
            maximum: 1.0;
            value: 0.0;
            step: 0.0;
            changed(percent) => {
                seeking = true;
            }
            released(percent) => {
                PlayerControls.seek(percent);
                seeking = false;
            }
        }
        // I fucking hate this
        Timer {
            interval: 0.1s;
            running: !seeking && !is-paused;
            triggered() => {
                seek-bar.value = PlayerControls.time-playing-percent();
            }
        }
        HorizontalLayout {
            rewind-button := Button {
                text: "Rewind";
                clicked => {
                    PlayerControls.rewind();
                }
            }
            ff-button := Button {
                text: "FF";
                clicked => {
                    PlayerControls.fast-forward();
                }
            }
            button := Button {
                text : is-paused ? "Paused" : "Playing";
                clicked => {
                    PlayerControls.pause-play();
                    is-paused = !is-paused;
                }
            }
            toggle-repeat-mode-button := Button {
                text: PlayerControls.repeat-mode-text;
                clicked => {
                    PlayerControls.toggle-repeat-mode();
                }
            }
            mute-button := Button {
                text: is-muted ? "Unmute": "Mute";
                clicked => {
                    if (is-muted) {
                        PlayerControls.change-volume(volume);
                        volume-slider.value = volume;
                    } else {
                        PlayerControls.change-volume(0);
                        volume-slider.value = 0;
                    }
                    is-muted = !is-muted;
                }
            }
            volume-slider := Slider {
                value: volume;
                minimum: 0.0;
                maximum: 1.0;
                changed(percent) => {
                    PlayerControls.change-volume(percent);
                    volume = percent;
                    is-muted = (percent == 0);
                }
            }
        }
    }
}

export struct SongModel {
    id: int,
    title: string,
    duration: int,
}

export component AppWindow inherits Window {
    preferred-height: 1080px / 2;
    preferred-width: 1920px / 2;
    in property <[SongModel]> songs;
    in property <int> curr_playlist_id;
    in property <int> curr_song_id;

    in property<bool> player-is-running: true;

    VerticalLayout {
        HorizontalLayout {
            PlaylistSelection {
                width: parent.width * 0.35;
            }

            ListView {
                for song in songs: SongComponent {
                    height: 10%;
                    title: "Song \{song.title}";
                }
            }
        }

        controls := PlayerControlsComponent {
            visible: player-is-running;
        }
    }
}
