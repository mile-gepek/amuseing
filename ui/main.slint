import { Button, ListView, Slider } from "std-widgets.slint";

component PlaylistSelection inherits Rectangle {
    preferred-height: 100%;
    background: red;
    in-out property <int> selected_index;
}

component SongComponent inherits Rectangle {
    background: #3d3d3d;
    in-out property <string> title <=> text.text;
    HorizontalLayout {
        play-button-rect := Rectangle {
            width: self.height;
            Text {
                text: "B";
            }
        }

        text := Text {
            width: 100%;
            vertical-alignment: center;
            height: root.height;
        }
    }
}

export global PlayerControls {
    pure callback is-paused() -> bool;

    pure callback toggle-repeat-mode();

    // toggle the current state, this also changes is-paused
    pure callback pause-play();

    // first arg is playlist id, second is song id
    pure callback start-song(int, int);

    pure callback rewind();
    pure callback fast-forward();

    pure callback change-volume(float);
    pure callback get-volume() -> float;
}

component PlayerControlsComponent inherits Rectangle {
    background: green;

    HorizontalLayout {
        rewind-button := Button {
            text: "Rewind";
            clicked => {
                PlayerControls.rewind();
            }
        }
        ff-button := Button {
            text: "FF";
            clicked => {
                PlayerControls.fast-forward();
            }
        }
        button := Button {
            text: PlayerControls.is-paused() ? "Paused" : "Playing";
            clicked => {
                PlayerControls.pause-play();
                self.text = PlayerControls.is-paused() ? "Paused" : "Playing";
            }
        }
        toggle-repeat-mode-button := Button {
            text: "RM";
            clicked => {
                PlayerControls.toggle-repeat-mode();
            }
        }
        volume-slider := Slider {
            value: PlayerControls.get-volume();
            minimum: 0;
            maximum: 1;
            changed(percent) => {
                PlayerControls.change-volume(percent);
            }
        }
    }
}

export struct SongModel {
    id: int,
    title: string,
    duration: int,
}

export enum RepeatModeEnum {
    Off,
    Single,
    All,
}

export component AppWindow inherits Window {
    preferred-height: 1080px / 2;
    preferred-width: 1920px / 2;
    in property <[SongModel]> songs;
    in property <int> curr_playlist_id;
    in property <int> curr_song_id;

    VerticalLayout {
        HorizontalLayout {
            PlaylistSelection {
                width: parent.width * 0.35;
            }

            ListView {
                for song in songs: SongComponent {
                    height: 10%;
                    title: "Song \{song.id}";
                }
            }
        }

        controls := PlayerControlsComponent { }
    }
}
